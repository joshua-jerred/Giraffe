{
    "general": {
        "SECTION_TYPE":"struct",
        "project_name": {
            "type": "string",
            "name": "Project Name",
            "description": "The name of the project. This is used in telemetry and other places to identify your flight.",
            "default": "Giraffe Flight 1",
            "min": 1,
            "max": 20,
            "pattern": "^(?!\\\\s)[a-zA-Z0-9_ -]{0,19}[^\\\\s]$"
        },
        "main_board": {
            "type": "enum",
            "name": "Main Board Type",
            "description": "The type of computer that the flight software is running on. This is important for the interfacing with the hardware.",
            "default": "other",

            "enum_name":"main_board",
            "options": [
                "other",
                "pi_zero_w2",
                "pi_4"
            ]
        },
        "starting_procedure": {
            "type": "enum",
            "name": "Starting Procedure",
            "description": "The flight procedure that the flight software should start with. See the flight procedures section.",
            "default": "other",

            "enum_name":"procedure_type",
            "options": [
                "testing",
                "pre_launch",
                "ascent",
                "descent",
                "recovery",
                "failsafe",
                "other"
            ]
        },
        "module_status_update_rate": {
            "type": "int",
            "name": "Module Status Updates Rate (ms)",
            "description": "The rate at which the modules will push their status to the flight software. The lower the number, the more up to date the status of each module will be, but it will also increase the amount of data being processed internally.",
            "default": 1000,
            "max": 60000,
            "min": 50,
            "step": 1
        }
    },
    "data_module_data": {
        "SECTION_TYPE":"struct",
        "log_data_to_file": {
            "type": "bool",
            "name": "Log Data To File",
            "description": "This is the master toggle for logging data to a local json file.",
            "default": true,
            "true": "enabled",
            "false": "disabled"
        },
        "file_system_check_interval": {
            "type": "int",
            "name": "File System Check Interval (ms)",
            "description": "The interval at which the file system will be checked for errors. This is important to ensure that the data is being logged correctly.",
            "default": 10000,
            "max": 60000,
            "min": 500,
            "step": 1
        },
        "log_strategy": {
            "type": "enum",
            "name": "Log Strategy",
            "description": "The strategy to use for logging data. If set to all, then every data point collected will be logged. If set to interval then data will be logged at a set interval.",
            "default": "interval",

            "enum_name":"log_strategy",
            "options": [
                "interval",
                "all",
                "selection_interval",
                "selection_all"
            ]
        },
        "log_detail": {
            "type": "enum",
            "name": "Log Detail",
            "description": "The amount of metadata to include. If set to full then timestamps of when data was collected will be included. If set to partial, only timestamps of when the data was logged will be included. This can save space.",
            "default": "full",

            "enum_name":"log_detail",
            "options": [
                "full",
                "partial"
            ]
        },
        "log_interval_ms": {
            "type": "int",
            "name": "Log Interval MS",
            "description": "The interval as to how often to log data. Only used if the Log Strategy is set to 'interval'.",
            "default": 5000,
            "max": 600000,
            "min": 100,
            "step": 1
        },
        "max_data_log_file_size_mb": {
            "type": "int",
            "name": "Max Data Log File Size MB",
            "description": "The maximum log file size in Mega-Bytes before overwrite or rotation.",
            "default": 10,
            "max": 500,
            "min": 1,
            "step": 1
        },
        "max_data_archive_size_mb": {
            "type": "int",
            "name": "Max Data Archive Size MB",
            "description": "The maximum log file archive size in Mega-Bytes before overwrite. The oldest log file will be overwritten first.",
            "default": 100,
            "max": 100000,
            "min": 50,
            "step": 1
        },
        "archive_method": {
            "type": "enum",
            "name": "Data Archive Method",
            "description": "Method of data archival/compression.",
            "default": "plain_text",

            "enum_name":"archive_method",
            "options": [
                "plain_text"
            ]
        },
        "data_log_file_contents": {
            "type": "string",
            "name": "Data Log File Contents",
            "description": "Not implemented",
            "default": "not implemented",

            "max": 50,
            "min": 0,
            "pattern": ""
        }
    },
    "data_module_influxdb": {
        "SECTION_TYPE":"struct",
        "influx_enabled": {
            "type": "bool",
            "name": "Enable InfluxDB Integration",
            "description": "This is the master toggle for InfluxDB (2.X) logging.",
            "default": false,
            "true": "enabled",
            "false": "disabled"
        },
        "log_errors": {
            "type": "bool",
            "name": "Log Errors",
            "description": "Log errors to the influx db database",
            "default": false,
            "true": "enabled",
            "false": "disabled"
        },
        "url": {
            "type": "string",
            "name": "InfluxDB URL",
            "description": "The URL (generally localhost) for the influx DB server.",
            "default": "localhost",
            "min": 0,
            "max": 50,
            "pattern": ""
        },
        "token": {
            "type": "string",
            "name": "InfluxDB Access Token",
            "description": "The API token for the InfluxDB user. This is stored in plain text!",
            "default": "none",
            "min": 0,
            "max": 50,
            "pattern": ""
        },
        "organization": {
            "type": "string",
            "name": "InfluxDB Organization",
            "description": "The InfluxDB Organization",
            "default": "giraffe",
            "min": 0,
            "max": 50,
            "pattern": ""
        },
        "data_bucket": {
            "type": "string",
            "name": "InfluxDB Data Bucket",
            "description": "The name of the bucket to stream data to.",
            "default": "gfs_data",
            "min": 0,
            "max": 50,
            "pattern": ""
        },
        "error_bucket": {
            "type": "string",
            "name": "InfluxDB Errors Bucket",
            "description": "The name of the bucket to stream errors to.",
            "default": "gfs_errors",
            "min": 0,
            "max": 50,
            "pattern": ""
        },
        "retention_policy": {
            "type": "enum",
            "name": "InfluxDB Retention Policy",
            "description": "Method of data archival/compression.",
            "default": "inf",

            "enum_name":"influxdb_retention_policy",
            "options": [
                "hour",
                "day",
                "week",
                "month",
                "year",
                "inf"
            ]
        },
        "contents": {
            "type": "string",
            "name": "Contents",
            "description": "Not implemented",
            "default": "not implemented",

            "max": 50,
            "min": 0,
            "pattern": ""
        }
    },
    "data_module_log": {
        "SECTION_TYPE":"struct",
        "log_to_file": {
            "type": "bool",
            "name": "Log To File",
            "description": "This is the master toggle for logging errors to a local json file.",
            "default": true,
            "true": "enabled",
            "false": "disabled"
        },
        "max_log_file_size_mb": {
            "type": "int",
            "name": "Max Log File Size MB",
            "description": "The maximum log file size in Mega-Bytes before overwrite or rotation.",
            "default": 10,
            "max": 500,
            "min": 1,
            "step": 1
        },
        "max_log_archive_size_mb": {
            "type": "int",
            "name": "Max Log Archive Size MB",
            "description": "The maximum log file archive size in Mega-Bytes before overwrite. The oldest log file will be overwritten first.",
            "default": 50,
            "max": 100000,
            "min": 50,
            "step": 1
        },
        "error_archive_method": {
            "type": "enum",
            "name": "Archive Method",
            "description": "Method of data archival/compression.",
            "default": "plain_text",

            "enum_name":"archive_method",
            "options": [
                "plain_text"
            ]
        },
        "log_level": {
            "type": "enum",
            "name": "Log Level",
            "description": "",
            "default": "info",

            "enum_name":"log_level",
            "options": [
                "info",
                "warn",
                "error"
            ]
        }
    },
    "console_module": {
        "SECTION_TYPE":"struct",
        "enabled": {
            "type": "bool",
            "name": "Console Interface",
            "description": "Whether or not to enable the console interface. Helpful for debugging without the web interface.",
            "default": true,
            "true": "enabled",
            "false": "disabled"
        },
        "update_interval": {
            "type": "int",
            "name": "Console Update Interval",
            "description": "How often the console interface should update in milliseconds. A higher value will result in less frequent updates.",
            "default": 1000,
            "max": 10000,
            "min": 100,
            "step": 100
        }
    },
    "server_module": {
        "SECTION_TYPE":"struct",
        "enabled": {
            "type": "bool",
            "name": "TCP Socket Enabled",
            "description": "",
            "default": true,
            "true": "enabled",
            "false": "disabled"
        },
        "tcp_socket_port": {
            "type": "int",
            "name": "Web Socket Port",
            "description": "The port that the web socket will use. Used for connecting to the web interface. This should be left unchanged unless you have a reason for it.",
            "default": 7893,
            "max": 65535,
            "min": 1024,
            "step": 1
        }
    },
    "system_module": {
        "SECTION_TYPE":"struct",
        "enabled": {
            "type": "bool",
            "name": "System Module Enabled",
            "description": "",
            "default": true,
            "true": "enabled",
            "false": "disabled"
        },
        "system_info_poll_rate_ms": {
            "type": "int",
            "name": "System Information Poll Rate ms",
            "description": "The interval to poll system data at (cpu, memory, disk usage, etc).",
            "default": 1000,
            "max": 600000,
            "min": 100,
            "step": 1
        }
    },
    "telemetry": {
        "SECTION_TYPE":"struct",
        "telemetry_enabled": {
            "type": "bool",
            "name": "Telemetry Enabled",
            "description": "Whether or not to enabled telemetry. This is required for APRS, SSTV, and Data Packets. In the current implementation, this requires an amateur radio license.",
            "default": false,
            "true": "enabled",
            "false": "disabled"
        },
        "call_sign": {
            "type": "string",
            "name": "Call Sign",
            "description": "A FCC (or equivalent) registered call sign. This is required for telemetry.",
            "default": "N0CALL",
            "max": 6,
            "min": 3,
            "pattern": "[a-zA-Z0-9]{1,3}[0-9][a-zA-Z0-9]{0,3}[a-zA-Z]"
        }
    },
    "telemetry_aprs": {
        "SECTION_TYPE":"struct",
        "telemetry_packets": {
            "type": "bool",
            "name": "APRS Telemetry Packets",
            "description": "If enabled, critical data will be sent as APRS telemetry packets. This will be configurable in the future.",
            "default": false,
            "true": "enabled",
            "false": "disabled"
        },
        "position_packets": {
            "type": "bool",
            "name": "APRS Position Packets",
            "description": "If enabled, compressed position reports will be sent. This is required for APRS tracking.",
            "default": false,
            "true": "enabled",
            "false": "disabled"
        },
        "frequency": {
            "type": "string",
            "name": "APRS Frequency",
            "description": "The frequency that APRS packets will be transmitted on. See aprs.fi for more information.",
            "default": "144.3900",
            "max": 8,
            "min": 8,
            "pattern": "[0-9]{3}.[0-9]{4}"
        },
        "ssid": {
            "type": "int",
            "name": "Source SSID",
            "description": "The SSID that will be used to identify your call sign. See the APRS specification for more information.",
            "default": 0,
            "max": 15,
            "min": 0,
            "step": 1
        },
        "destination_address": {
            "type": "string",
            "name": "APRS Destination Address",
            "description": "This is the destination address that will be used in all packets. See the APRS specification for more information.",
            "default": "APRS",
            "max": 6,
            "min": 3,
            "pattern": ""
        },
        "destination_ssid": {
            "type": "int",
            "name": "APRS Destination SSID",
            "description": "This is the SSID that will be used to identify the destination call sign. See the APRS specification for more information.",
            "default": 0,
            "max": 15,
            "min": 0,
            "step": 1
        },
        "symbol_table": {
            "type": "enum",
            "name": "APRS Symbol Table",
            "description": "The symbol table that will be used. See the APRS specification for more information.",
            
            "enum_name":"aprs_symbol_table",
            "options": [
                "primary",
                "alternate"
            ],
            "default": "primary"
        },
        "symbol": {
            "type": "string",
            "name": "APRS Symbol",
            "description": "The symbol that will be used to identify your position. This is a single character. The default is '/' which is a dot on both tables. See the APRS specification for more information.",
            "default": "/",
            "max": 1,
            "min": 1,
            "pattern": ""
        },
        "comment": {
            "type": "string",
            "name": "Comment",
            "description": "This is the comment that will be sent with each APRS position report. See the APRS specification for more information.",
            "default": "Giraffe Flight Software",
            "max": 43,
            "min": 0,
            "pattern": ""
        }
    },
    "telemetry_sstv": {
        "SECTION_TYPE":"struct",
        "enabled": {
            "type": "bool",
            "name": "SSTV Enabled",
            "description": "Indicates whether or not SSTV is enabled. This requires a valid telemetry configuration, a call sign, and a camera extension. The rate at which images are sent is determined by the flight procedure defined by the user.",
            "default": false,
            "true": "enabled",
            "false": "disabled"
        },
        "frequency": {
            "type": "string",
            "name": "SSTV Frequency",
            "description": "The frequency that will be used to transmit SSTV images. See your relevant Band Plan for more information.",
            "default": "145.5100",
            "max": 8,
            "min": 8,
            "pattern": "[0-9]{3}.[0-9]{4}"
        },
        "mode": {
            "type": "enum",
            "name": "SSTV Mode",
            "default": "robot36",
            "description": "The SSTV mode that will be used. Currently, only Robot 36 is supported.",
            "enum_name":"sstv_mode",
            "options": [
                "robot36"
            ]
        },
        "overlay_data": {
            "type": "bool",
            "name": "SSTV Data Overlay",
            "description": "If enabled, data defined internally as 'critical' will be overlaid on the image.",
            "default": true,
            "true": "enabled",
            "false": "disabled"
        }
    },
    "telemetry_data_packets": {
        "SECTION_TYPE":"struct",
        "enabled": {
            "name": "Data Packets Enabled",
            "type": "bool",
            "default": false,
            "description": "If enabled, PSK data packets can be sent. These can be decoded with FLDIGI The contents of these packets are defined by the user. The rate at which packets are sent is determined by the flight procedure defined by the user.",
            "true": "enabled",
            "false": "disabled"
        },
        "frequency": {
            "type": "string",
            "default": "145.5100",
            "required": true,
            "name": "Data Packets Frequency",
            "description": "The frequency that will be used to transmit data packets. See your relevant Band Plan for more information.",
            "max": 8,
            "min": 8,
            "pattern": "[0-9]{3}.[0-9]{4}"
        },
        "mode": {
            "type": "enum",
            "name": "Data Packets Mode",
            "default": "bpsk250",
            "description": "The PSK31 mode that will be used. All modes supported by FLDIGI are supported for both BPSK and QPSK.",
            "enum_name":"data_packets_mode",
            "options": [
                "bpsk125",
                "bpsk250",
                "bpsk500",
                "bpsk1000",
                "qpsk125",
                "qpsk250",
                "qpsk500",
                "afsk_ax25"
            ]
        },
        "morse_call_sign": {
            "type": "bool",
            "name": "Morse Call Sign",
            "description": "If enabled, the call sign will be sent in 20wpm morse code at the end of each packet. This may be a legal requirement, for station identification, in some places so please check your local regulations.",
            "default": true,
            "true": "enabled",
            "false": "disabled"
        },
        "comment": {
            "type": "string",
            "name": "Data Packets Comment",
            "default": "Giraffe Flight Software",
            "description": "This is a comment that will be sent with each data packet. This is not required but may be added. There is a maximum length of 200 characters.",
            "max": 200,
            "min": 0,
            "pattern": ""
        }
    },
    "extensions":{
        "SECTION_TYPE":"list",
        "name": {
            "type": "string",
            "default": "none",
            "name": "Extension Name",
            "description": "The name of the extension, used for identifying the extension. This must be unique.",
            "max": 3,
            "min": 10,
            "pattern": ""
        },
        "enabled": {
            "type": "bool",
            "default": false,
            "name": "Enabled",
            "description": "If enabled, the extension will be used.",
            "true": "enabled",
            "false": "disabled"
        },
        "type": {
            "type": "enum",
            "name": "Extension Type",
            "default": "unknown",
            "description": "The type of extension.",
            "enum_name":"extension_type",
            "options": [
                "unknown",
                "sim_temp",
                "sim_pres",
                "sim_hum",
                "sim_gps",
                "sim_bat",
                "sim_imu",
                "bmp180",
                "bme280",
                "sam_m8q",
                "ds18b20"
            ]
        },
        "update_interval":{
            "type": "int",
            "default": 1000,
            "name": "Update Interval (ms)",
            "description": "The interval at which the extension will be allowed to poll for data.",
            "max": 600000,
            "min": 50,
            "pattern": ""
        },
        "critical":{
            "type": "bool",
            "default": false,
            "name": "Critical Extension",
            "description": "If enabled, the extension will be considered critical. This will change the way that the extension is handled internally.",
            "true": "enabled",
            "false": "disabled"
        },
        "extra_args":{
            "type":"string",
            "default":"",
            "name":"Extra Arguments",
            "description":"Some extensions allow for extra configuration, this is where that configuration is defined.",
            "max": 100,
            "min": 0,
            "pattern": ""
        }
    },
    "extension_module":{
        "SECTION_TYPE":"struct",
        "status_polling_rate":{
            "type": "int",
            "default": 1000,
            "name": "Status Polling Rate (ms)",
            "description": "The rate at which the status of the extension will be polled. This is used to determine if the extension is still alive.",
            "max": 60000,
            "min": 500
        },
        "max_restart_attempts":{
            "type": "int",
            "default": 5,
            "name": "Max Restart Attempts",
            "description": "The maximum number of times that the extension will be restarted before it is disabled. Resets after each successful restart.",
            "max": 10,
            "min": 1
        },
        "restart_delay_minimum":{
            "type": "int",
            "default": 1000,
            "name": "Restart Delay Minimum (ms)",
            "description": "The minimum amount of time that the extension module will wait before trying to restart and extension.",
            "max": 60000,
            "min": 500
        },
        "start_timeout":{
            "type": "int",
            "default": 10000,
            "name": "Start Timeout (ms)",
            "description": "The amount of time that the extension module will wait for an extension to start before it's considered 'stalled'.",
            "max": 60000,
            "min": 500
        },
        "max_startup_attempts":{
            "type": "int",
            "default": 5,
            "name": "Max Startup Attempts",
            "description": "The maximum number of times that the extension will be restarted before it is considered dead. Resets after each successful restart.",
            "max": 10,
            "min": 1
        }
    }
}