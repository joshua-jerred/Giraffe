/// =*========GIRAFFE========*=
/// A Unified Flight Command and Control System
/// https://github.com/joshua-jerred/Giraffe
/// https://giraffe.joshuajer.red/
/// =*=======================*=
///
/// @file   test_cases_fcs.hpp
///
/// =*=======================*=
/// @author     Joshua Jerred (https://joshuajer.red)
/// @date       2024-12-03
/// @copyright  2024 (license to be defined)

#pragma once

#include "bit_types.hpp"
#include "shared_data.hpp"

namespace bit {

/// @brief This structure contains the data generated by each test case.
struct TestResult {
  TestId test_id;
  TestGroupId group_id;
  TestStatus status;
  std::string failure_reason;
};

namespace test_case {

/// @brief Checks if the error frame has any active errors.
/// @param shared_data - The shared data object.
/// @return TestResult - The result of the test.
TestResult runTestFCS_0001(data::SharedData &shared_data);

/// @brief Checks if the launch position is set correctly.
/// @param shared_data - The shared data object.
/// @return TestResult - The result of the test.
static inline TestResult runTestFCS_0003(data::SharedData &shared_data) {
  TestResult result{.test_id = TestId::FCS_LaunchPositionTest,
                    .group_id = TestGroupId::FCS,
                    .status = TestStatus::SKIPPED,
                    .failure_reason = ""};
  double latitude = 0.0;
  double longitude = 0.0;
  double altitude = 0.0;

  if (!shared_data.flight_data.getLaunchPosition(latitude, longitude,
                                                 altitude)) {
    result.status = TestStatus::FAILED;
    result.failure_reason = "Launch position is not set.";
    return result;
  }

  result.status = TestStatus::PASSED;

  return result;
};

/// @brief Checks if the data module is processing data correctly/at a
/// reasonable rate.
/// @param shared_data - The shared data object.
/// @return TestResult - The result of the test.
TestResult runTestFCS_0004(data::SharedData &shared_data);

/// @brief Checks if GPS hardware is configured and running.
/// @param shared_data - The shared data object.
/// @return TestResult - The result of the test.
TestResult runTestGPS_0400(data::SharedData &shared_data);

} // namespace test_case

} // namespace bit