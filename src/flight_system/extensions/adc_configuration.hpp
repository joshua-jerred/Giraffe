/**
 * =*========GIRAFFE========*=
 * A Unified Flight Command and Control System
 * https://github.com/joshua-jerred/Giraffe
 * https://giraffe.joshuajer.red/
 * =*=======================*=
 *
 * @file   adc_configuration.hpp
 * @brief  ADC Configuration through 'extra_args'
 *
 * =*=======================*=
 * @author     Joshua Jerred (https://joshuajer.red)
 * @date       2023-07-05
 * @copyright  2023 (license to be defined)
 */

#ifndef ADC_CONFIGURATION_HPP_
#define ADC_CONFIGURATION_HPP_

#include <cstdint>
#include <string>

namespace extension {

/**
 * @brief ADC Types, a way to specify how to interpret the ADC values.
 */
enum class AdcType {
  /**
   * @brief Raw ADC count (default).
   * @details Requires no additional configuration.
   */
  RAW_COUNT,

  /**
   * @brief Percentage of max resolution.
   * @details If a min and max are provided, the percentage will be calculated
   * off of that. Otherwise, the percentage will be calculated off of the
   * resolution.
   */
  PERCENTAGE,

  /**
   * @brief Voltage divider
   */
  VOLTAGE_DIVIDER
};

/**
 * @brief ADC Configuration - generated by parsing a config string.
 */
struct AdcConfig {
  /**
   * @brief How to interpret the ADC values.
   */
  AdcType type = AdcType::RAW_COUNT;

  /**
   * @brief The resolution of the ADC in bits.
   */
  uint32_t resolution = 12;

  // Voltage Divider
  /**
   * @brief The voltage reference of the ADC in millivolts.
   */
  uint32_t voltage_reference = 3300;

  /**
   * @brief The resistance of the first resistor in the voltage divider in ohms.
   */
  uint32_t resistor_1 = 1000;

  /**
   * @brief The resistance of the second resistor in the voltage divider in
   * ohms.
   */
  uint32_t resistor_2 = 1000;

  // Percentage
  /**
   * @brief The maximum value to use when calculating the percentage.
   */
  uint32_t max = 4095;

  /**
   * @brief The minimum value to use when calculating the percentage.
   */
  uint32_t min = 0;

  /**
   * @brief Whether or not to clamp the percentage to 0-100.
   */
  bool clamp = false;
};

/**
 * @brief Parse an ADC config string into an AdcConfig struct.
 * @details If a configuration is invalid for a given type,
 * it will revert to 'RAW_COUNT'.
 * @see adc_config.md
 *
 * @param config_string - The config string to parse.
 * @param out_config - The config struct to populate.
 * @return true - If the config string was parsed successfully.
 * @return false - If the string was invalid.
 */
bool parseAdcConfig(std::string config_string, AdcConfig &out_config);

} // namespace extension

#endif /* ADC_CONFIGURATION_HPP_ */